@page "/product"
@inject IProductRepository _productRepository
@inject IJSRuntime _JS

<BsModal OnModalConfirmation="ConfirmDelete"
         ButtonBootstrapStyle="bi bi-trash3-fill"
         ButtonText=""
         Title="Are you sure you want to delete this product?"
></BsModal>



@if (IsProcessing)
{
    <div class="position-absolute w-75 d-flex flex-column  align-items-center bg-white justify-content-center"> 
        <img src="lib/images/loading.gif" alt="Loading..." class="img-fluid" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Product List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="product/create" class="btn btn-lg btn-secondary" style="width:240px"><i class="bi bi-plus-circle"></i>Add New Product</a>
                </div>
                @if (Product.Any())
                {
                    <table class="table table-bordered table-striped mt-4">
                        <thead>
                        <tr>
                            <th>Name</th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody>
                            @foreach (var obj in Product)
                            {
                                <tr>
                                    <td>
                                        @obj.Name
                                    </td>
                                    <td>
                                        <a href="@($"product/update/{obj.Id}")" class="btn btn-sm btn-primary"><i class="bi bi-pencil-fill"></i>Update</a>
                                        <button class="btn btn-sm btn-danger" @onclick="()=>HandleDelete(obj.Id)"><i class="bi bi-trash3-fill"></i>Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<Product> Product { get; set; } = new List<Product>();
    private int DeleteProductId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        // IsProcessing = true; in OnInitializedAsync Version
        // await LoadProduct();
        // IsProcessing = false;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
            IsProcessing = false;
            StateHasChanged();
        }
        // return base.OnAfterRenderAsync(firstRender);
    }
    
    private async Task LoadProduct()
    {
        Product = await _productRepository.GetAllAsync();
    }


    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        
        _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete(bool isConfirmed)
    {
        IsProcessing = true;
        await _JS.InvokeVoidAsync("HideConfirmationModal");
        if (isConfirmed && DeleteProductId > 0)
        {
            var result =  await _productRepository.DeleteAsync(DeleteProductId);
            if (result)
                _JS?.ToastrSuccess("Product deleted successfully.");
            else
                _JS?.ToastrError("Failed to delete product.");

            await LoadProduct();
        }
        DeleteProductId = 0;
        IsProcessing = false;
    }
}