@page "/product/create"
@page "/product/update/{id:int}"
@using YumBlazor.Services.Extensions
@inject IProductRepository _productRepository 
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _JS
@if (IsProcessing)
{
    <div class="position-absolute w-75 d-flex flex-column  align-items-center bg-white justify-content-center"> 
        <img src="lib/images/loading.gif" alt="Loading..." class="img-fluid" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id > 0 ?"Update" : "Create")</h2>
                </div>   
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Product" FormName="ProductUpsertForm" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator/>
                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-value="Product.Name" class="form-control" id="Name" placeholder="Name"/>
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(()=> Product.Name)"/>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-value="Product.Description" class="form-control" id="Description" placeholder="Description"/>
                        <label for="Name">Description</label>
                        <ValidationMessage For="@(()=> Product.Description)"/>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-value="Product.Price" class="form-control" id="Price" placeholder="Price"/>
                        <label for="Price">Price</label>
                        <ValidationMessage For="@(()=> Product.Price)"/>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select" id="category">
                            <option value="0" disabled selected="">--Select Category--</option>
                            @foreach (var category in _categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }  
                        </InputSelect>
                        <label for="category">Category</label>
                        <ValidationMessage For="@(()=> Product.CategoryId)"/>
                    </div>
                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn  btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-floppy2-fill">@(Id > 0 ?"Update" : "Create")</i>
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                                <a href="product" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                    <i class="bi bi-arrow-bar-left">Back to List</i>
                                </a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}


@code {
    [Parameter] public int Id { get; set; }
    
    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();

    private IEnumerable<Category> _categories = new List<Category>();
    
    private  bool IsProcessing { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firsRender)
    {
        if (firsRender)
        {
            await LoadProductAndCategoryList();
            IsProcessing = false;
            StateHasChanged();
        }

    }

    private async Task LoadProductAndCategoryList()
    {
        if (Id > 0)
        {
            Product = await _productRepository.GetAsync(Id);
        }
        _categories = await _categoryRepository.GetAllAsync();
        
    }

    private async Task UpsertProduct()
    {
        IsProcessing = true;
        if (Product.Id == 0)
        { 
            await _productRepository.CreateAsync(Product);
            await _JS.ToastrSuccess("Product successfully created.");
        
        }
        else
        {
            await _productRepository.UpdateAsync(Product);
            await _JS.ToastrSuccess("Product successfully updated.");

        }

        IsProcessing = false;
        _navigationManager.NavigateTo("product");
    }
}
